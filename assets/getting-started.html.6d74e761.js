import{r as p,o,c,a as s,b as e,F as l,d as t,e as n}from"./app.81443808.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";const u={},r=t(`<h1 id="getting-started" tabindex="-1"><a class="header-anchor" href="#getting-started" aria-hidden="true">#</a> Getting Started</h1><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation" aria-hidden="true">#</a> Installation</h2><h4 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> @ruleenginejs/runtime
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h4 id="yarn" tabindex="-1"><a class="header-anchor" href="#yarn" aria-hidden="true">#</a> yarn</h4><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @ruleenginejs/runtime
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><h2 id="usage" tabindex="-1"><a class="header-anchor" href="#usage" aria-hidden="true">#</a> Usage</h2><p>Create pipeline:</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>
  Pipeline<span class="token punctuation">,</span>
  StartStep<span class="token punctuation">,</span>
  EndStep<span class="token punctuation">,</span>
  SingleStep
<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@ruleenginejs/runtime&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> pipeline <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Pipeline</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> start <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StartStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> end <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EndStep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> step <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingleStep</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token function-variable function">handler</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token parameter">context<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

start<span class="token punctuation">.</span><span class="token function">connectTo</span><span class="token punctuation">(</span>step<span class="token punctuation">)</span><span class="token punctuation">;</span>
step<span class="token punctuation">.</span><span class="token function">connectTo</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>

pipeline<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">,</span> step<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
pipeline<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><p>You can create a pipeline in the rules engine manually, but it&#39;s better to do it using a visual editor.</p>`,10),k=n("Install "),d={href:"https://marketplace.visualstudio.com/items?itemName=ruleengine.vscode-ruleengine-editor",target:"_blank",rel:"noopener noreferrer"},m=n("VS Code Rule Engine Editor"),h=n("."),b=s("li",null,[n("Create new "),s("code",null,"foo.rule"),n(" and open file in VS Code editor.")],-1),_=s("li",null,[n("Drag the step elements from the toolbar to the canvas and connect them with lines. "),s("em",null,[s("strong",null,"Any pipeline should begin with a start step and end with an end step.")])],-1),g=s("li",null,[n("Save changes and compile "),s("code",null,"foo.rule"),n(" file in javascript.")],-1),f=n("If you are using "),v={href:"https://github.com/ruleenginejs/rule-loader",target:"_blank",rel:"noopener noreferrer"},x=n("webpack loader"),y=n(" or "),w={href:"https://github.com/ruleenginejs/rollup-plugin-rule",target:"_blank",rel:"noopener noreferrer"},j=n("rollup plugin"),S=n(" to compile the rule file into javascript code, just import and call the asynchronous execute method:"),E=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo.rule&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1),C=n("Or install "),N={href:"https://marketplace.visualstudio.com/items?itemName=ruleengine.vscode-ruleengine-compiler",target:"_blank",rel:"noopener noreferrer"},V=n("VS Code Rule Engine Compiler"),I=n(" and right-click on the "),B=s("code",null,"foo.rule",-1),F=n(" file and select the menu "),R=s("code",null,"Rule Engine: Compile",-1),T=n(". File "),q=s("code",null,"foo.js",-1),L=n(" will be created in the same directory. Next, import the file in your code and call the asynchronous execute method:"),P=t(`<div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> context <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
foo<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token parameter">e</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>`,1);function A(D,G){const a=p("ExternalLinkIcon");return o(),c(l,null,[r,s("ul",null,[s("li",null,[k,s("a",d,[m,e(a)]),h]),b,_,g]),s("p",null,[f,s("a",v,[x,e(a)]),y,s("a",w,[j,e(a)]),S]),E,s("p",null,[C,s("a",N,[V,e(a)]),I,B,F,R,T,q,L]),P],64)}var Y=i(u,[["render",A]]);export{Y as default};
